time_age_cat[3] <- age_in_category
time_age_cat[2] <- 5*12 - age_in_category
} else if (age > 180){
age_in_category <- age - 180
time_age_cat[2] <- age_in_category
time_age_cat[1] <- 5*12 - age_in_category
} else {
time_age_cat[1] <- 60
}
if(sum(time_age_cat) != 60){
print(id)
print((time_age_cat))
stop()
}
return (c(id, time_age_cat))
}
#-----------------------------------------------------------------------------
all_fertility <- NULL
for (y in 1:6){
# Read in DHS data
print(y)
# Read in DHS data
if (y == 1){
all_data <- readRDS("DATA/DHS/pe_fathers_12.RDS")
} else if (y == 2){
all_data <- readRDS("DATA/DHS/pe_fathers_11.RDS")
} else if (y == 3){
all_data <- readRDS("DATA/DHS/pe_fathers_10.RDS")
} else if (y == 4){
all_data <- readRDS("DATA/DHS/pe_fathers_09.RDS")
} else if (y == 5){
all_data <- readRDS("DATA/DHS/pe_fathers_07.RDS")
} else if (y == 6){
all_data <- readRDS("DATA/DHS/pe_fathers_04.RDS")
}
all_data <- select(all_data, -father_wi, -father_bmi, -father_smoking, -household_smoking,  -father_anemia)
# Survey year
year <- floor(all_data$survey_date[1])
# Add one to year to make labelling easier later
year_tmp <- year + 1
# Separate out men who are fathers
father_data <- all_data[which(!is.na(all_data$age_child_now)),]
# Separate out full data
full <- father_data[which(father_data$age_father_now > 0 & father_data$age_mother_now >0 & father_data$father_status == 1),]
not_nec_mothers <- father_data[which(father_data$age_father_now > 0),]
# Makes a null fertility vector
fertility <- NULL
# Repeat bootstrapping 10 times
for (j in 1:10){
# Assigns fathers to missing children
for (i in 1:length(father_data$id_household)){
# Only adjust those with missing father data
if (is.na(father_data$age_father_now[i])){
# What is age of this child
age_child <- father_data$age_child_now[i]
# What is age of mother
age_mother <- father_data$age_mother_now[i]
# If father status is missing or unknown - work out if father should be alive
if (father_data$father_status[i] > 1){
other_children <- father_data[which(father_data$age_child_now == age_child),]
if (!is.na(age_mother)){
if (age_mother != 0){
other_children <- other_children[which(other_children$age_mother_now == age_mother),]
}
}
prop_live = sum(other_children$father_status == 1) / length(other_children$father_status)
p <- runif(1, 0, 1)
if (p < prop_live){
father_data$father_status[i] = 1
} else {
father_data$father_status[i] = 0
}
}
# Find other children with data that matches
if (age_mother == 0 | is.na(age_mother)){
others <- not_nec_mothers[which(not_nec_mothers$age_child_now == age_child),]
} else {
others <- full[which(full$age_child_now == age_child & full$age_mother_now),]
}
# Won't mater if can't match up older children since subset last 5 years
if(length(others$id_household) > 0){
# Randomly select a child from the others list
new_father <- others[sample(1:length(others$id_household), 1),]
father_data$age_father_now[i] <- new_father$age_father_now
father_data$new_id[i] <- new_father$id
}
}
}
# Removes children with dead father
father_data <- father_data[which(father_data$father_status == 1),]
# Data where every child has age of father
father_data$age_father_birth <- father_data$age_father_now - father_data$age_child_now
# select children born in last 5 year
selected_children <- father_data[which(father_data$age_child_now < 5),]
# Summarise number of children in each age
summ <- selected_children %>%
group_by(age_father_birth) %>%
summarize(count = n())
# Plots a histogram
#p <- ggplot(summ, aes(age_father_birth, count)) + geom_col() + theme_bw()
#print(p)
# Calculate number of children in each age category
summ$group <- sapply(summ$age_father_birth, grouping)
band_children <- summ %>%
group_by(group) %>%
summarise("births" = sum(count))
band_children$label <- labels[1:length(band_children$group)]
# Work out exposure
# Removes all lines where father doesn't have an age as we match them to other fathers
exposure <- all_data[!is.na(all_data$age_father_now),]
# Subset so only have one line per man
unique_men <- exposure %>% distinct(id_man, .keep_all= TRUE)
# Randomly assign each man a birth month
unique_men$man_age_month <- sample(0:11, length(unique_men$id_man), replace = TRUE)
# Work out mens age in months
unique_men$age_months <- unique_men$age_father_now*12 + unique_men$man_age_month
# Remove men (boys) under the age of 5*years
unique_men <- unique_men[which(unique_men$age_father_now > 5),]
# Calculate number of years spent in each age category
exposure_months <- t(apply(unique_men, 1, age_spent, y=1))
exposure_years <- data.frame("exposure_years" = colSums( exposure_months[,2:16])/12)
exposure_years$label <- c("under 15", labels)
# Calculate fertility
data <- left_join(exposure_years, band_children)
data$fertility <- data$births/data$exposure_years
fertility <- cbind(fertility, data$fertility)
}
fertility_rate = rowMeans(fertility)
if (y == 4){
for (i in 1:2){
all_fertility <- cbind(all_fertility, fertility_rate)
}
} else if (y == 5 | y ==6){
for (i in 1:3){
all_fertility <- cbind(all_fertility, fertility_rate)
}
} else {
all_fertility <- cbind(all_fertility, fertility_rate)
}
}
df_fertility <- data.frame(all_fertility)
names(df_fertility) <- paste0("y", 2012 - 0:10)
df_fertility$ages <- factor(exposure_years$label, levels = c("under 15", labels))
saveRDS(df_fertility, file = "DATA/Peru/male_fertility.RDS")
p <- ggplot(df_fertility) +
geom_point(aes(ages, y2012, col = "2012")) +
geom_point(aes(ages, y2012, col = "2011")) +
geom_point(aes(ages, y2010, col = "2010")) +
geom_point(aes(ages, y2010, col = "2009")) +
geom_point(aes(ages, y2005, col = "2007")) +
geom_point(aes(ages, y2005, col = "2004")) +
scale_color_manual(values = c("2012" = "black", "2011" = "purple", "2010" = "blue", "2009" = "red", "2007" = "blue", "2004" = "grey")) +
theme_bw()
print(p)
set.seed(10)
# Functions -------------------------------------------------------------------
# Defines age categories that group corresponds to
labels = c("(15-20]", "(20-25]", "(25-30]", "(30-35]", "(35-40]",
"(40-45]", "(45-50]", "(50-55]", "(55-60]", "(60-65]", "(65-70]",
"(70-75]", "(75-80]", "80+")
# Age groups
grouping <- function(age){
if (age >= 15 & age < 20){
return (1)
} else if (age >= 20 & age < 25){
return (2)
} else if (age >=25 & age < 30){
return (3)
} else if (age >= 30 & age < 35){
return (4)
} else if (age >= 35 & age < 40){
return (5)
} else if (age >= 40 & age < 45){
return (6)
} else if (age >= 45 & age < 50){
return (7)
} else if (age >= 50 & age < 55){
return (8)
} else if (age >= 55 & age < 60){
return (9)
} else if (age >= 60 & age < 65){
return (10)
} else if (age >= 65 & age < 70){
return (11)
} else if (age >= 70 & age < 75){
return (12)
} else if (age >= 75 & age < 80){
return(13)
} else {
return (14)
}
}
age_spent <- function(row, y){
id <- as.numeric(row[2])
age_month <- as.numeric(row[9])
age <- age_month - 5*(y-1)
time_age_cat <- vector(mode = "numeric", length =  15)
if (age > 960){
if (age > 960 + 60){
time_age_cat[15] = 60
} else {
age_in_category <- age - 960
time_age_cat[15] <- age_in_category
time_age_cat[14] <- 5*12 - age_in_category
}
} else if (age > 900){
age_in_category <- age - 900
time_age_cat[14] <- age_in_category
time_age_cat[13] <- 5*12 - age_in_category
} else if (age > 840){
age_in_category <- age - 840
time_age_cat[13] <- age_in_category
time_age_cat[12] <- 5*12 - age_in_category
} else if (age > 780){
age_in_category <- age - 780
time_age_cat[12] <- age_in_category
time_age_cat[11] <- 5*12 - age_in_category
} else if (age > 720){
age_in_category <- age - 720
time_age_cat[11] <- age_in_category
time_age_cat[10] <- 5*12 - age_in_category
} else if (age > 660){
age_in_category <- age - 660
time_age_cat[10] <- age_in_category
time_age_cat[9] <- 5*12 - age_in_category
} else if (age > 600){
age_in_category <- age - 600
time_age_cat[9] <- age_in_category
time_age_cat[8] <- 5*12 - age_in_category
} else if (age > 540){
age_in_category <- age - 540
time_age_cat[8] <- age_in_category
time_age_cat[7] <- 5*12 - age_in_category
} else if (age > 480){
age_in_category <- age - 480
time_age_cat[7] <- age_in_category
time_age_cat[6] <- 5*12 - age_in_category
} else if (age > 420){
age_in_category <- age - 420
time_age_cat[6] <- age_in_category
time_age_cat[5] <- 5*12 - age_in_category
} else if (age > 360){
age_in_category <- age - 360
time_age_cat[5] <- age_in_category
time_age_cat[4] <- 5*12 - age_in_category
} else if (age > 300){
age_in_category <- age - 300
time_age_cat[4] <- age_in_category
time_age_cat[3] <- 5*12 - age_in_category
} else if (age > 240){
age_in_category <- age - 240
time_age_cat[3] <- age_in_category
time_age_cat[2] <- 5*12 - age_in_category
} else if (age > 180){
age_in_category <- age - 180
time_age_cat[2] <- age_in_category
time_age_cat[1] <- 5*12 - age_in_category
} else {
time_age_cat[1] <- 60
}
if(sum(time_age_cat) != 60){
print(id)
print((time_age_cat))
stop()
}
return (c(id, time_age_cat))
}
#-----------------------------------------------------------------------------
all_fertility <- NULL
for (y in 1:6){
print(y)
# Read in DHS data
if (y == 1){
all_data <- readRDS("DATA/DHS/pe_mothers_12.RDS")
} else if (y == 2){
all_data <- readRDS("DATA/DHS/pe_mothers_11.RDS")
} else if (y == 3){
all_data <- readRDS("DATA/DHS/pe_mothers_10.RDS")
} else if (y == 4){
all_data <- readRDS("DATA/DHS/pe_mothers_09.RDS")
} else if (y == 5){
all_data <- readRDS("DATA/DHS/pe_mothers_07.RDS")
} else if (y == 6){
all_data <- readRDS("DATA/DHS/pe_mothers_04.RDS")
}
all_data <- select(all_data, -mother_wi, -mother_bmi, -mother_smoking, -mother_anemia)
# Survey year
year <- floor(all_data$survey_date[1])
# Add one to year to make labelling easier later
year_tmp <- year + 1
# Separate out women who are mothers
mother_data <- all_data[which(!is.na(all_data$age_child_now)),]
# Separate out full data
full <- mother_data[which(mother_data$age_mother_now > 0 & mother_data$age_father_now >0 & mother_data$mother_status == 1),]
not_nec_fathers <- mother_data[which(mother_data$age_mother_now > 0),]
# Makes a null fertility vector
fertility <- NULL
# Repeat bootstrapping 10 times
for (j in 1:10){
# Assigns mothers to missing children
for (i in 1:length(mother_data$id_household)){
# Only adjust those with missing mother data
if (is.na(mother_data$age_mother_now[i])){
# What is age of this child
age_child <- mother_data$age_child_now[i]
# What is age of father
age_father <- mother_data$age_father_now[i]
# If father status is missing or unknown - work out if father should be alive
if (mother_data$mother_status[i] > 1){
other_children <- mother_data[which(mother_data$age_child_now == age_child),]
if (!is.na(age_father)){
if (age_father != 0){
other_children <- other_children[which(other_children$age_father_now == age_father),]
}
}
prop_live = sum(other_children$mother_status == 1) / length(other_children$mother_status)
p <- runif(1, 0, 1)
if (p < prop_live){
mother_data$mother_status[i] = 1
} else {
mother_data$mother_status[i] = 0
}
}
# Find other children with data that matches
if (age_father == 0 | is.na(age_father)){
others <- not_nec_fathers[which(not_nec_fathers$age_child_now == age_child),]
} else {
others <- full[which(full$age_child_now == age_child & full$age_father_now),]
}
# Won't mater if can't match up older children since subset last 5 years
if(length(others$id_household) > 0){
# Randomly select a child from the others list
new_mother <- others[sample(1:length(others$id_household), 1),]
mother_data$age_mother_now[i] <- new_mother$age_mother_now
mother_data$new_id[i] <- new_mother$id
}
}
}
# Removes children with dead mother
mother_data <- mother_data[which(mother_data$mother_status == 1),]
# Data where every child has age of mother
mother_data$age_mother_birth <- mother_data$age_mother_now - mother_data$age_child_now
# select children born in last 5 year
selected_children <- mother_data[which(mother_data$age_child_now < 5),]
# Summarise number of children in each age
summ <- selected_children %>%
group_by(age_mother_birth) %>%
summarize(count = n())
# Plots a histogram
#p <- ggplot(summ, aes(age_mother_birth, count)) + geom_col() + theme_bw()
#print(p)
# Calculate number of children in each age category
summ$group <- sapply(summ$age_mother_birth, grouping)
band_children <- summ %>%
group_by(group) %>%
summarise("births" = sum(count))
band_children$label <- labels[1:length(band_children$group)]
# Work out exposure
# Removes all lines where mother doesn't have an age as we match them to other mothers
exposure <- all_data[!is.na(all_data$age_mother_now),]
# Subset so only have one line per man
unique_women <- exposure %>% distinct(id_woman, .keep_all= TRUE)
# Randomly assign each woman a birth month
unique_women$woman_age_month <- sample(0:11, length(unique_women$id_woman), replace = TRUE)
# Work out womens age in months
unique_women$age_months <- unique_women$age_mother_now*12 + unique_women$woman_age_month
# Remove women (girls) under the age of 5*years
unique_women <- unique_women[which(unique_women$age_mother_now > 5),]
# Calculate number of years spent in each age category
exposure_months <- t(apply(unique_women, 1, age_spent, y=1))
exposure_years <- data.frame("exposure_years" = colSums(exposure_months[,2:16])/12)
exposure_years$label <- c("under 15", labels)
# Calculate fertility
data <- left_join(exposure_years, band_children)
data$fertility <- data$births/data$exposure_years
fertility <- cbind(fertility, data$fertility)
}
fertility_rate = rowMeans(fertility)
if (y == 4){
for (i in 1:2){
all_fertility <- cbind(all_fertility, fertility_rate)
}
} else if (y == 5 | y ==6){
for (i in 1:3){
all_fertility <- cbind(all_fertility, fertility_rate)
}
} else {
all_fertility <- cbind(all_fertility, fertility_rate)
}
}
df_fertility <- data.frame(all_fertility)
names(df_fertility) <- paste0("y", 2012 - 0:10)
df_fertility$ages <- factor(exposure_years$label, levels = c("under 15", labels))
saveRDS(df_fertility, file = "DATA/Peru/female_fertility.RDS")
p <- ggplot(df_fertility) +
geom_point(aes(ages, y2012, col = "2012")) +
geom_point(aes(ages, y2012, col = "2011")) +
geom_point(aes(ages, y2010, col = "2010")) +
geom_point(aes(ages, y2010, col = "2009")) +
geom_point(aes(ages, y2005, col = "2007")) +
geom_point(aes(ages, y2005, col = "2004")) +
scale_color_manual(values = c("2012" = "black", "2011" = "purple", "2010" = "blue", "2009" = "red", "2007" = "blue", "2004" = "grey")) +
theme_bw()
print(p)
# Peru
process_number_children_peru <- function(){
# fathers
cat(sprintf("Processing number of children of fathers\n"))
data = readRDS('DATA/Peru/male_fertility.RDS')
data$y2013 = data$y2012
data$y2014 = data$y2012
data$y2015 = data$y2012
data$y2016 = data$y2015
data$y2017 = data$y2016
data$y2018 = data$y2016
data$y2019 = data$y2016
data = reshape2::melt(data, id.vars = c('ages'),
variable.name = 'year', value.name = 'fertility_rate')
setnames(data, 'ages', 'age')
data$age = as.character(data$age)
data$age = gsub('[(]', '', data$age)
data$age = gsub('[]]', '', data$age)
data$year = as.character(data$year)
data$year = gsub('y', '', data$year)
data$fertility_rate[which(is.na(data$fertility_rate))] = 0
data$age = unlist(lapply(data$age,function(x){ ifelse(x != '80+', paste0(strsplit(x, '-')[[1]][1], '-',
as.numeric(strsplit(x, '-')[[1]][2])-1), x)}))
data$fertility_rate[data$age == "80+"] = 0
data_f = copy(data)
data_f$date = data_f$year
data_f$gender = 'M'
write_csv(data_f, path = paste0('DATA/fertility/peru_fertility_m_all.csv'))
process_children_father_80_plus("peru", data_f)
is_child_mortality_needed = 0
add_child_mortality(is_child_mortality_needed, "peru")
# mothers
cat(sprintf("Processing number of children of mothers\n"))
data = readRDS('DATA/Peru/female_fertility.RDS')
data$y2013 = data$y2012
data$y2014 = data$y2012
data$y2015 = data$y2012
data$y2016 = data$y2015
data$y2017 = data$y2016
data$y2018 = data$y2016
data$y2019 = data$y2016
data = reshape2::melt(data, id.vars = c('ages'),
variable.name = 'year', value.name = 'fertility_rate')
setnames(data, 'ages', 'age')
data$age = as.character(data$age)
data$age = gsub('[(]', '', data$age)
data$age = gsub('[]]', '', data$age)
data$year = as.character(data$year)
data$year = gsub('y', '', data$year)
data$fertility_rate[which(is.na(data$fertility_rate))] = 0
data$age = unlist(lapply(data$age,function(x){ ifelse(x != '80+', paste0(strsplit(x, '-')[[1]][1], '-',
as.numeric(strsplit(x, '-')[[1]][2])-1), x)}))
data_f = copy(data)
data_f$date = data_f$year
data_f$gender = 'F'
write_csv(data_f, path = paste0('DATA/fertility/peru_fertility_f.csv'))
is_child_mortality_needed = 0
process_children_all("peru", is_child_mortality_needed, data_f)
process_fertility_plots("peru")
}
process_number_children_peru()
# Peru
process_orphans_peru = function(){
country = 'peru'
d_deaths = read.csv('DATA/Peru/peru_all.csv', stringsAsFactors = FALSE)
d_merge = copy(d_deaths)
d_merge$age = as.character(d_merge$age)
d_children = read.csv(paste0('DATA/children/', country,'_children.csv'), stringsAsFactors = FALSE)
d_children$age = paste0(d_children$age%/%5 * 5,'-',d_children$age %/% 5 *5+4)
#d_children$age = paste0((d_children$age)%/%10 * 10 ,'-',(d_children$age) %/% 10 *10+9)
d_children$age = ifelse(d_children$age %in% c( '95-99','100+'), '95+', d_children$age)
d_children = d_children %>% group_by(age, gender) %>% mutate(nb_c = mean(children)) %>%
select(-children) %>% ungroup()%>%distinct()
d_merge$gender = as.character(d_merge$gender)
d_children$gender = ifelse(d_children$gender == 'female', 'Female', 'Male')
d_m1 = merge(d_merge, d_children, by = c('age', 'gender'))
d_m1 = as.data.table(d_m1)
d_m1[, orphans := round(deaths_2018 * nb_c)]
#d_m = merge(d_m1, f_ew, by = c('age', 'gender'))
d_m1$age = as.character(d_m1$age)
d_m1$age = ifelse(d_m1$age == '0-4', '00-04',
ifelse(d_m1$age == '5-9','05-09' ,d_m1$age))
d_m1 = d_m1%>% arrange(age)
write_csv(path = paste0('DATA/children/', country,'_orphans_all.csv'), d_m1)
p <- ggplot(d_m1, aes(x = age, y = orphans, fill = gender)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw()+
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))+
xlab('Age of Parent') +
ylab('Number of Orphans')+
guides(fill=guide_legend(title="Sex of Parent"))
ggsave(filename = "figures/orphans_all_age_peru.pdf", p, width = 6, height = 5)
#excess_death, total_covid19_deaths,
d_summary = d_m1 %>% select(age, gender, deaths_2018, orphans)
d_summary$age = ifelse(d_summary$age %in% c('70-74','75-79', '80-84','85-89', '90-94','95+'), '70+',
ifelse(d_summary$age %in% c('50-54','55-59','60-64','65-69'), '50-69',
ifelse(d_summary$age %in% c('20-24','25-29', '30-34','35-39', '40-44','45-49'), '20-49','0-19')))
d_summary = d_summary %>% group_by(age, gender) %>% mutate(#excess = sum(excess_death),
total_deaths = as.integer(round(sum(deaths_2018))),
nb_orphans = as.integer( round(sum(orphans)))) %>% ungroup() %>%
select(-orphans, -deaths_2018) %>%distinct()
#-excess_death, -total_covid19_deaths,
write_csv(path = 'DATA/Peru/all_data.csv', d_summary)
d_summary %>% filter(age != '0-14') %>% group_by(gender) %>% mutate(#excess1 = round(sum(excess)),
deaths= round(sum(total_deaths)),
orphans= round( sum( nb_orphans))) %>% ungroup()
}
process_orphans_peru()
